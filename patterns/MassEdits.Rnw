\Name{Look Out For Mass Updates}
% Look Out / Watch Out
% Mass updates / Bulk updates / batch modification

\Problem

  Determine which changes to bug reports were the result of a mass update.

\Context

  Changes to a bug report are often the result of an effort made by developers to triage, fix or verify a bug. Sometimes, however, hundreds or thousands of bug reports are changed almost simultaneously. Such changes are not caused by a burst of productivity; instead, they are the result of a mass update, often performed with the purpose of cleaning up the bug tracking system.

  Mass updates can also be motivated by a policy change. In Eclipse Modeling Framework, for instance, developers decided that bug reports containing fixes that were already published on their website should have the status {\tt VERIFIED}\footnote{See \url{http://wiki.eclipse.org/Modeling_PMC_Meeting,_2007-10-16}}. A mass status update was needed to make previous bug reports conform to the new policy.

  Mass updates are characterized by a large number of changes of the \emph{same type} (e.g., marking a bug report as {\tt VERIFIED} or changing a target milestone) made by a single developer in a short period of time. Often such changes are accompanied by a comment that is the same for all changes in the mass update.

\Solution

  First, choose the type of change that you wish to analyze (e.g., changing a bug status to {\tt VERIFIED}). Then apply one of the following solutions. 

  \emph{Solution 1}. Select only the changes of the chosen type, along with the time of the change. Sort the changes by time and then plot the accumulated number of changes over time as a line chart.

  The line is monotonically increasing, but periods with a large number of changes will stand out as steep ascents. Examine the vertical axis to assess whether such ascents represent a large number of changes (e.g., thousands). If this is the case, then it is likely that the changes were caused by a mass update.

  \emph{Solution 2}. Select only the changes of the chosen type, along with the date of the change, the user who made the change and the comment. Then, group by similar triples $\langle date, user, comment \rangle$, and sort them by number of occurrences. Triples with frequency above a given threshold (e.g., hundreds) are good candidates for mass updates. You may read the comment text and look for references to cleanup, policy change or mass update.

\Discussion

  The first solution is useful for a quick and exploratory assessment of mass updates, but it is subjective and may be inaccurate. For example, some projects have testing phases, in which the verification activity is higher than usual. Such phases can be identified by applying the \emph{Testing Phase} pattern~\cite{Souza2013b}. In this case, the bug status is not mass updated to {\tt VERIFIED}; instead, each change reflects an actual verification effort.

  In the second solution, users and their comments are considered, which helps improve its accuracy. It is a numeric, objective solution, but it is also more computationally intensive.

\Example

  Souza and Chavez~\cite{Souza2012} used the first solution (see Figure 2 in their paper) and a variation of the second without taking comments into account to detect mass verifications (i.e., changes which set the status to {\tt VERIFIED}). They discarded all changes that were part of mass updates which changed at least 50 bug reports.

  \emph{Solution 1}. Here is a sample R code to plot the accumulated number of verifications over time, which produces Figure~\ref{fig:mass}.

<<echo=FALSE, results=hide>>=
changes <- readRDS("../data/netbeans-platform-changes.rds")
@

<<results=hide>>=
ver <- subset(changes, field == "bug_status" 
  & new.value == "VERIFIED")
ver <- ver[order(ver$time), ]
ver$n.changes <- 1:nrow(ver)
with(ver, plot(n.changes ~ time, type="l"))
@

<<figmass,echo=FALSE,include=FALSE>>=
par(mar=c(4,4,2,2) + 0.1)
with(ver, plot(n.changes ~ time, type="l"))
@

\begin{figure}[!t]
\centering
<<fig=TRUE,echo=FALSE,width=6,height=5>>=
<<figmass>>
@
  \caption{Accumulated number of changes over time.}
  \label{fig:mass}
\end{figure}

  In this chart, some line segments are almost vertical (e.g., the line between 2002 and 2004). Such segments mark dates with mass updates.

<<echo=FALSE,results=hide>>=
records.shown <- 6
@

  \emph{Solution 2}. Here is a sample R code to count updates by user, date, and comment. First, select only verifications, and then use the {\tt merge} operation to associate them with their respective comments. After that, group and count them as usual. The \Sexpr{records.shown} records with the highest counts are shown in Table~\ref{tab:mass}.

<<echo=FALSE, results=hide>>=
comments <- readRDS("../data/netbeans-platform-comments.rds")
@
<<results=hide>>=
library(plyr)
ver <- subset(changes, field == "bug_status" 
  & new.value == "VERIFIED")
ver$date <- as.Date(ver$time)
full <- merge(ver, comments)
cnt <- count(full, c("date", "user", 
                     "comment.md5"))
cnt <- cnt[order(cnt$freq, decreasing=T), ]
@
<<echo=FALSE, results=tex>>=
library(xtable)
data <- head(cnt[, c("date", "user", "freq")], records.shown)
data$date <- as.character(data$date)
x <- xtable(data,
  caption="Sample of mass updates, comments omitted.",
  label="tab:mass")
print(x, 
  include.rownames=FALSE, 
  caption.placement="top",
  table.placement="!t")
@


% \RelatedPatterns

%   How many changes in a day are considered normal and how many indicate mass updates? Be sure to Choose a Suitable Threshold (Section \ref{pat:threshold}).

  %After finding mass update candidates, it is a good idea to [Read the Fine Comments] to gain more confidence that the changes resulted from a mass update.

