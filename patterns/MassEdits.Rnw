\Name{Look Out For Mass Updates}
% Look Out / Watch Out
% Mass updates / Bulk updates / batch modification

\Problem

  Discover changes to bug reports that were the result of a mass update.

\Context

  Changes to a bug report are often the result of an effort made by developers to triage, fix or verify a bug. Sometimes, however, hundreds or thousands of bug reports are changed almost simultaneously. Such changes are not caused by a burst of productivity; instead, they are the result of a mass update, often done with the purpose of cleaning up the bug tracking system.

  Mass updates can be motivated by a policy change. In Eclipse Modeling Framework, for instance, developers decided that bug reports containing fixes that were already published on their website should have the status {\tt VERIFIED}. A mass status update was needed to make previous bug reports conform to the new policy.

  Mass updates are characterized by a large number of changes of the \emph{same type} (e.g., marking a bug report as {\tt VERIFIED} or changing a target milestone) made by a single developer in a short period of time. Often such changes are accompanied by a comment that is the same for all changes in the mass update.

\Solution

  First, choose the type of change that you wish to analyze (e.g., changing a bug status to {\tt VERIFIED}). Then apply one of the following solutions. 

  \emph{Solution 1}. Select only the changes of the chosen type, along with the time of the change. Sort the changes by time and then plot the accumulated number of changes over time as a line chart.

  The line is always increasing, but periods with many changes will stand out as steep ascents. Examine your vertical axis to assess whether such ascents represent a large number of changes (e.g., thousands). If this is the case, then it is likely that the changes were caused by a mass update.

  \emph{Solution 2}. Select only the changes of the chosen type, along with the date of the change, the user who made the change and the comment. Then, for each triple $\langle date, user, comment \rangle$, count the number of occurrences in the data set. Then, sort the triples by number of occurences. Triples with highest frequencies are good candidates for mass updates. You may analyse the comment text to see if they refer to cleanup, policy change or mass update in general.

\Discussion

  The first solution to find mass updates is more visual, but less accurate, as it does not take into account the user who made the changes. It is useful for a quick exploratory assessment of mass updates.
  The second solution is numeric and takes into account the users and their comments, but is more computationally intensive.

\Example

  For example, Souza et al. \cite{Souza2012} used the first solution (see Figure 2 in their paper) and a variation of the second without taking comments into account to detect mass verifications (i.e., changes in which the status is set to {\tt VERIFIED}). They discarded all changes that were part of a mass update which updated at least 50 bug reports.

  \emph{Solution 1}. Here is a sample R code to plot the accumulated number of verifications over time.

<<echo=FALSE, results=hide>>=
changes <- readRDS("../data/netbeans-platform-changes.rds")
@

<<fig=TRUE,width=6,height=4>>=
ver <- subset(changes, field == "bug_status" 
  & new.value == "VERIFIED")
ver <- ver[order(ver$time), ]
ver$n.changes <- 1:nrow(ver)
with(ver, plot(n.changes ~ time, type="l"))
@

  In this chart, some line segments are almost vertical (e.g., the line between 2002 and 2004). Such segments mark dates when there were mass updates.

  \emph{Solution 2}. Here is a sample R code to count updates by user, date, and comment. First, select only verifications, and then use the {\tt merge} operation to associate them with their respective comments. After that, do the counting as usual. Here, the 6 records with higher counts are shown.

<<echo=FALSE, results=hide>>=
comments <- readRDS("../data/netbeans-platform-comments.rds")
@
<<results=hide>>=
library(plyr)
ver <- subset(changes, field == "bug_status" 
  & new.value == "VERIFIED")
ver$date <- as.Date(ver$time)
full <- merge(ver, comments)
cnt <- count(full, c("date", "user", 
                     "comment.md5"))
cnt <- cnt[order(cnt$freq, decreasing=T), ]
head(cnt[, c("date", "user", "freq")])
@
<<echo=FALSE, results=tex>>=
library(xtable)
x <- head(cnt[, c("date", "user", "freq")])
x$date <- as.character(x$date)
print(xtable(x), include.rownames=FALSE, caption.placement="top")
@


% \RelatedPatterns

%   How many changes in a day are considered normal and how many indicate mass updates? Be sure to Choose a Suitable Threshold (Section \ref{pat:threshold}).

  %After finding mass update candidates, it is a good idea to [Read the Fine Comments] to gain more confidence that the changes resulted from a mass update.

