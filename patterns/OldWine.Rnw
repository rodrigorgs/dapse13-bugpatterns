\Name{Old Wine Tastes Better}

%[numeric analysis (filtering)] [generic domain]

%\todo[inline]{aka Let them mature / give 'em some time / a long future ahead / the benefit of the doubt}

\Problem
  
  Determine bug reports that are too recent to be classified.

  %Find bugs whose outcome is not yet known.
  %Discard bug reports that may have a long future ahead.
  %estao em progresso
  %nao tem finalizacao definida.
  %sao passiveis de evolucao.

\Context

  Bug reports change over time. Sometimes, one needs to classify a bug report according to the eventual occurrence of some change. 
  %
  For example, suppose that one wants to predict whether future bug reports will be reopened. To train a prediction model, each existing bug report has to be classified as reopening (if it was or will be reopened) or non-reopening (if it will likely never be reopened). However, for recent bug reports, it is likely that they were not reopened yet---even if they will be, eventually. Therefore, recent reports cannot be accurately classified with available data, and should be discarded from the training set.
  %
  The question is how long one should wait for a change to happen before assuming it will never happen.

\Solution

<<echo=false,results=hide>>=
changes <- readRDS("../data/netbeans-platform-changes.rds")
bugs <- readRDS("../data/netbeans-platform-bugs.rds")
@

  Assume you want to classify each bug report, according to a particular change (e.g., reopening, fixing), as \emph{eventually} (if the change happened or will happen, eventually) or \emph{never} (if the change will likely never happen). 
  %
  If the bug report has already undergone the change, classify it as \emph{eventually}. If not, then measure its lifetime, from creation to the last date available in the data. If the lifetime is long enough (i.e., it is above some \emph{threshold}), then classify it as \emph{never}. 
  %
  If the lifetime is short, however, one cannot be confident that the change will never happen, hence discard it from the analysis.

  The key is to choose an appropriate threshold for the lifetime of bug reports. At first, just choose any value (e.g., 30 days). Then, compute the confidence, $\alpha$, that bugs older than the threshold will never undergo the change. To do that, first compute the proportion, $c$ of bug reports that have undergone the change. Then, compute the proportion of older bug reports (i.e., which have a lifetime greater than the threshold), $t$, that did not undergo the change within the threshold. The confidence, $\alpha$, can be approximated by the quotient $c / t$.

  Assess whether $\alpha$ is high enough (most data scientists find $0.95$ to be an acceptable value). If it is not, choose another threshold and recompute $\alpha$ until you are satisfied. After finding an appropriate threshold, discard bugs with lifetime shorter than the threshold, because it is not possible to determine, with confidence $\alpha$, that they will never undergo the change.

\Discussion

  It is a common mistake to keep recent bug reports. This is equivalent to choosing a threshold of 0, a value that is too optimistic. There is a trade-off between the confidence, $\alpha$, and the size of the final data set: the higher the confidence, the higher the number of discarded bugs.%higher confidence means more bugs are discarded.

\Example

  Here's how to apply this pattern using R to analyze the change of a bug status to {\tt REOPENED}. First of all, create a data frame {\tt data}, augmenting {\tt bugs} with information about their first reopening and their lifetime.

<<>>=
library(data.table)
reopenings <- data.table(changes)[
  field == "bug_status" & new.value == "REOPENED",
  list(time.first.reopen = min(time)), by=bug]
data <- merge(bugs, reopenings, all.x=T)
data$days.to.reopen <- as.numeric(
  data$time.first.reopen - data$creation.time, 
  units="days")
last.time <- max(data$modif.time)
data$lifetime <- as.numeric(
  last.time - data$creation.time, 
  units="days")
@

  In this example, we use a threshold of 42 days (6 weeks). Use it to compute $\alpha$ ({\tt alpha}):

<<>>=
threshold <- 42
older <- subset(data, lifetime > threshold)
c <- sum(is.na(data$days.to.reopen)) / nrow(data)
t <- sum(is.na(older$days.to.reopen) 
  | older$days.to.reopen > threshold) / nrow(older)
alpha <- c / t
@

<<echo=false,results=hide>>=
alpha.2d <- format(round(alpha, 2), nsmall = 2)
proportion.discarded <- 1 - (nrow(older) / nrow(data))
percent.discarded <- 100 * proportion.discarded
percent.discarded <- format(round(percent.discarded, 1), nsmall = 1)
percent.discarded
@

  In this case, we find $\alpha = \Sexpr{alpha.2d}$, an acceptable value. Therefore, you should only analyze bug reports older than 42 days---which are already stored in the variable {\tt older}---and discard the rest. In this case, only $\Sexpr{percent.discarded}\%$ of the bugs needed to be discarded.

% \RelatedPatterns

% Be sure to [Choose a Suitable Threshold].
